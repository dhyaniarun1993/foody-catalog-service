// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dhyaniarun1993/foody-catalog-service/repositories (interfaces: RestaurantRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	errors "github.com/dhyaniarun1993/foody-common/errors"
	dto "github.com/dhyaniarun1993/foody-catalog-service/schemas/dto"
	models "github.com/dhyaniarun1993/foody-catalog-service/schemas/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRestaurantRepository is a mock of RestaurantRepository interface
type MockRestaurantRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRestaurantRepositoryMockRecorder
}

// MockRestaurantRepositoryMockRecorder is the mock recorder for MockRestaurantRepository
type MockRestaurantRepositoryMockRecorder struct {
	mock *MockRestaurantRepository
}

// NewMockRestaurantRepository creates a new mock instance
func NewMockRestaurantRepository(ctrl *gomock.Controller) *MockRestaurantRepository {
	mock := &MockRestaurantRepository{ctrl: ctrl}
	mock.recorder = &MockRestaurantRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRestaurantRepository) EXPECT() *MockRestaurantRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockRestaurantRepository) Create(arg0 context.Context, arg1 models.Restaurant) (models.Restaurant, errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(models.Restaurant)
	ret1, _ := ret[1].(errors.AppError)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockRestaurantRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRestaurantRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *MockRestaurantRepository) Delete(arg0 context.Context, arg1 string) errors.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(errors.AppError)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRestaurantRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRestaurantRepository)(nil).Delete), arg0, arg1)
}

// Get mocks base method
func (m *MockRestaurantRepository) Get(arg0 context.Context, arg1 string) (models.Restaurant, errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(models.Restaurant)
	ret1, _ := ret[1].(errors.AppError)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRestaurantRepositoryMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRestaurantRepository)(nil).Get), arg0, arg1)
}

// GetAllRestaurants mocks base method
func (m *MockRestaurantRepository) GetAllRestaurants(arg0 context.Context, arg1 dto.GetAllRestaurantsRequestQuery, arg2 int64) ([]models.Restaurant, errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRestaurants", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.Restaurant)
	ret1, _ := ret[1].(errors.AppError)
	return ret0, ret1
}

// GetAllRestaurants indicates an expected call of GetAllRestaurants
func (mr *MockRestaurantRepositoryMockRecorder) GetAllRestaurants(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRestaurants", reflect.TypeOf((*MockRestaurantRepository)(nil).GetAllRestaurants), arg0, arg1, arg2)
}

// GetAllRestaurantsTotalCount mocks base method
func (m *MockRestaurantRepository) GetAllRestaurantsTotalCount(arg0 context.Context, arg1 dto.GetAllRestaurantsRequestQuery, arg2 int64) (int64, errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRestaurantsTotalCount", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(errors.AppError)
	return ret0, ret1
}

// GetAllRestaurantsTotalCount indicates an expected call of GetAllRestaurantsTotalCount
func (mr *MockRestaurantRepositoryMockRecorder) GetAllRestaurantsTotalCount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRestaurantsTotalCount", reflect.TypeOf((*MockRestaurantRepository)(nil).GetAllRestaurantsTotalCount), arg0, arg1, arg2)
}
