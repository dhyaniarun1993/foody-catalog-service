// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dhyaniarun1993/foody-catalog-service/repositories (interfaces: ProductRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	errors "github.com/dhyaniarun1993/foody-common/errors"
	dto "github.com/dhyaniarun1993/foody-catalog-service/schemas/dto"
	models "github.com/dhyaniarun1993/foody-catalog-service/schemas/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockProductRepository is a mock of ProductRepository interface
type MockProductRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepositoryMockRecorder
}

// MockProductRepositoryMockRecorder is the mock recorder for MockProductRepository
type MockProductRepositoryMockRecorder struct {
	mock *MockProductRepository
}

// NewMockProductRepository creates a new mock instance
func NewMockProductRepository(ctrl *gomock.Controller) *MockProductRepository {
	mock := &MockProductRepository{ctrl: ctrl}
	mock.recorder = &MockProductRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProductRepository) EXPECT() *MockProductRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockProductRepository) Create(arg0 context.Context, arg1 models.Product) (models.Product, errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(models.Product)
	ret1, _ := ret[1].(errors.AppError)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockProductRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProductRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *MockProductRepository) Delete(arg0 context.Context, arg1, arg2 string) errors.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(errors.AppError)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockProductRepositoryMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProductRepository)(nil).Delete), arg0, arg1, arg2)
}

// Get mocks base method
func (m *MockProductRepository) Get(arg0 context.Context, arg1, arg2 string) (models.Product, errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.Product)
	ret1, _ := ret[1].(errors.AppError)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockProductRepositoryMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProductRepository)(nil).Get), arg0, arg1, arg2)
}

// GetProductsByRestaurantID mocks base method
func (m *MockProductRepository) GetProductsByRestaurantID(arg0 context.Context, arg1 string, arg2 dto.GetAllProductsRequestQuery) ([]models.Product, errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByRestaurantID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.Product)
	ret1, _ := ret[1].(errors.AppError)
	return ret0, ret1
}

// GetProductsByRestaurantID indicates an expected call of GetProductsByRestaurantID
func (mr *MockProductRepositoryMockRecorder) GetProductsByRestaurantID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByRestaurantID", reflect.TypeOf((*MockProductRepository)(nil).GetProductsByRestaurantID), arg0, arg1, arg2)
}

// GetProductsByRestaurantTotalCount mocks base method
func (m *MockProductRepository) GetProductsByRestaurantTotalCount(arg0 context.Context, arg1 string, arg2 dto.GetAllProductsRequestQuery) (int64, errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByRestaurantTotalCount", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(errors.AppError)
	return ret0, ret1
}

// GetProductsByRestaurantTotalCount indicates an expected call of GetProductsByRestaurantTotalCount
func (mr *MockProductRepositoryMockRecorder) GetProductsByRestaurantTotalCount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByRestaurantTotalCount", reflect.TypeOf((*MockProductRepository)(nil).GetProductsByRestaurantTotalCount), arg0, arg1, arg2)
}
