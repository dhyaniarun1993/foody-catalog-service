// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dhyaniarun1993/foody-catalog-service/services (interfaces: ProductService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	errors "github.com/dhyaniarun1993/foody-common/errors"
	dto "github.com/dhyaniarun1993/foody-catalog-service/schemas/dto"
	models "github.com/dhyaniarun1993/foody-catalog-service/schemas/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockProductService is a mock of ProductService interface
type MockProductService struct {
	ctrl     *gomock.Controller
	recorder *MockProductServiceMockRecorder
}

// MockProductServiceMockRecorder is the mock recorder for MockProductService
type MockProductServiceMockRecorder struct {
	mock *MockProductService
}

// NewMockProductService creates a new mock instance
func NewMockProductService(ctrl *gomock.Controller) *MockProductService {
	mock := &MockProductService{ctrl: ctrl}
	mock.recorder = &MockProductServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProductService) EXPECT() *MockProductServiceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockProductService) Create(arg0 context.Context, arg1 dto.CreateProductRequest) (models.Product, errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(models.Product)
	ret1, _ := ret[1].(errors.AppError)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockProductServiceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProductService)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *MockProductService) Delete(arg0 context.Context, arg1 dto.DeleteProductRequest) errors.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(errors.AppError)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockProductServiceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProductService)(nil).Delete), arg0, arg1)
}

// Get mocks base method
func (m *MockProductService) Get(arg0 context.Context, arg1 dto.GetProductRequest) (models.Product, errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(models.Product)
	ret1, _ := ret[1].(errors.AppError)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockProductServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProductService)(nil).Get), arg0, arg1)
}

// GetAllProducts mocks base method
func (m *MockProductService) GetAllProducts(arg0 context.Context, arg1 dto.GetAllProductsRequest) (dto.GetAllProductsResponse, errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProducts", arg0, arg1)
	ret0, _ := ret[0].(dto.GetAllProductsResponse)
	ret1, _ := ret[1].(errors.AppError)
	return ret0, ret1
}

// GetAllProducts indicates an expected call of GetAllProducts
func (mr *MockProductServiceMockRecorder) GetAllProducts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProducts", reflect.TypeOf((*MockProductService)(nil).GetAllProducts), arg0, arg1)
}
