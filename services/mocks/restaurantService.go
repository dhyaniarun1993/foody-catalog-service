// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dhyaniarun1993/foody-catalog-service/services (interfaces: RestaurantService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	errors "github.com/dhyaniarun1993/foody-common/errors"
	dto "github.com/dhyaniarun1993/foody-catalog-service/schemas/dto"
	models "github.com/dhyaniarun1993/foody-catalog-service/schemas/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRestaurantService is a mock of RestaurantService interface
type MockRestaurantService struct {
	ctrl     *gomock.Controller
	recorder *MockRestaurantServiceMockRecorder
}

// MockRestaurantServiceMockRecorder is the mock recorder for MockRestaurantService
type MockRestaurantServiceMockRecorder struct {
	mock *MockRestaurantService
}

// NewMockRestaurantService creates a new mock instance
func NewMockRestaurantService(ctrl *gomock.Controller) *MockRestaurantService {
	mock := &MockRestaurantService{ctrl: ctrl}
	mock.recorder = &MockRestaurantServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRestaurantService) EXPECT() *MockRestaurantServiceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockRestaurantService) Create(arg0 context.Context, arg1 dto.CreateRestaurantRequest) (models.Restaurant, errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(models.Restaurant)
	ret1, _ := ret[1].(errors.AppError)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockRestaurantServiceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRestaurantService)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *MockRestaurantService) Delete(arg0 context.Context, arg1 dto.DeleteRestaurantRequest) errors.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(errors.AppError)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRestaurantServiceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRestaurantService)(nil).Delete), arg0, arg1)
}

// Get mocks base method
func (m *MockRestaurantService) Get(arg0 context.Context, arg1 dto.GetRestaurantRequest) (models.Restaurant, errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(models.Restaurant)
	ret1, _ := ret[1].(errors.AppError)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRestaurantServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRestaurantService)(nil).Get), arg0, arg1)
}

// GetAllRestaurants mocks base method
func (m *MockRestaurantService) GetAllRestaurants(arg0 context.Context, arg1 dto.GetAllRestaurantsRequest) (dto.GetAllRestaurantsResponse, errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRestaurants", arg0, arg1)
	ret0, _ := ret[0].(dto.GetAllRestaurantsResponse)
	ret1, _ := ret[1].(errors.AppError)
	return ret0, ret1
}

// GetAllRestaurants indicates an expected call of GetAllRestaurants
func (mr *MockRestaurantServiceMockRecorder) GetAllRestaurants(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRestaurants", reflect.TypeOf((*MockRestaurantService)(nil).GetAllRestaurants), arg0, arg1)
}
