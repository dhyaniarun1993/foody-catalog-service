// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dhyaniarun1993/foody-catalog-service/acl (interfaces: RBAC)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	gorbac "github.com/mikespook/gorbac"
	reflect "reflect"
)

// MockRBAC is a mock of RBAC interface
type MockRBAC struct {
	ctrl     *gomock.Controller
	recorder *MockRBACMockRecorder
}

// MockRBACMockRecorder is the mock recorder for MockRBAC
type MockRBACMockRecorder struct {
	mock *MockRBAC
}

// NewMockRBAC creates a new mock instance
func NewMockRBAC(ctrl *gomock.Controller) *MockRBAC {
	mock := &MockRBAC{ctrl: ctrl}
	mock.recorder = &MockRBACMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRBAC) EXPECT() *MockRBACMockRecorder {
	return m.recorder
}

// Can mocks base method
func (m *MockRBAC) Can(arg0 string, arg1 gorbac.Permission) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Can", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Can indicates an expected call of Can
func (mr *MockRBACMockRecorder) Can(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Can", reflect.TypeOf((*MockRBAC)(nil).Can), arg0, arg1)
}
